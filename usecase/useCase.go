// Package usecase defines all the interfaces for a Microservice application.
// It is the entry point for the application's business logic. It is a top level package for a Microservice application.
// This top level only defines interface, the concrete implementations are defined in sub-package of it.
// It only depends on model package. No other package should dependent on it.

// If transaction is supported, the transaction boundary should be defined in this package.
// A suffix-"WIthTx" can be added to the name of a function to distinguish it from a non-transaction one.

// The use case example, which are not real world use case, are created to illustrate the project layout. You should
// replace them with your real use case.

package usecase

import (
	"github.com/jfeng45/servicetmpl/model"
)

// RegistrationUseCaseInterface is for users to register themselves to an application. It has registration related functions.
// ModifyAndUnregisterWithTx() is the one support transaction, the other are not.
type RegistrationUseCaseInterface interface {
	// RegisterUser register a user to an application, basically save it to a database. The returned resultUser that has
	// a Id ( auto generated by database) after persisted
	RegisterUser(user *model.User) (resultUser *model.User, err error)
	// UnregisterUser unregister a user by user name from an application, basically remove it from a database.
	UnregisterUser(username string) error
	// ModifyUser change user information on the User.Id passed in.
	ModifyUser(user *model.User) error
	// ModifyAndUnregister change user information and then unregister the user on the User.Id passed in.
	// It is create to illustrate transaction, no real use.
	ModifyAndUnregister(user *model.User) error
	// ModifyAndUnregisterWithTx change user information and then unregister the user on the User.Id passed in.
	// It supports transaction
	// It is create to illustrate transaction, no real use.
	ModifyAndUnregisterWithTx(user *model.User) error
}

// ListUserUseCaseInterface handles different ways to retrieve user information
type ListUserUseCaseInterface interface {
	// ListUser retrieves all users as an array of user
	ListUser() ([]model.User, error)
	// Find retrieves a user based on a user's id
	Find(id int) (*model.User, error)
}
