// Package dataservice and it's sub-package represents data related operations, mainly access local data store,
// for example, database.
// This is the top level package and it only defines interface, and all implementations are defined in sub-package
// Use case package depends on it.
package dataservice

import (
	"github.com/jfeng45/servicetmpl/model"
)

// UserDataInterface represents interface for use data access through local database
type UserDataInterface interface {
	// Remove deletes a user by user name from database.
	Remove(username string) (rowsAffected int64, err error)
	// Find retrieves a user from database based on a user's id
	Find(id int) (*model.User, error)
	// FindByName retrieves a user from database by User.Name
	FindByName(name string) (user *model.User, err error)
	// FindAll retrieves all users from database as an array of user
	FindAll() ([]model.User, error)
	// Update changes user information on the User.Id passed in.
	Update(user *model.User) (rowsAffected int64, err error)
	// Insert adds a user to a database. The returned resultUser has a Id, which is auto generated by database
	Insert(user *model.User) (resultUser *model.User, err error)
	//need to add this interface if the interface needs transaction
	//TxDataInterface
}

// CacheDataInterface represents interface for cache service operations
type CacheDataInterface interface {
	// Get handles call to Get function on Cache service
	Get(key string) ([]byte, error)
	// Store handles call to Store function on Cache service
	Store(key string, value []byte) error
}

// CacheDataInterface represents interface for course data service operations.
// It is created to illustrate project layout, no real use.
type CourseDataInterface interface {
	GetAvailableCourse()
	FindAll() ([]model.Course, error)
}

// TxDataInterface represents operations needed for transaction support.
type TxDataInterface interface {
	// TxBegin starts a transaction. It gets a DB handler from the receiver and return a UserDataInterface, which has a
	// *sql.Tx inside. Any following data access will go through the *sql.Tx wrapped inside the UserDataInterface
	TxBegin() (TxDataInterface, error)
	// TxEnd is called at the end of a transaction and based on whether there is a error, it commits or rollback the
	// transaction.
	// txFunc is the business function wrapped in a transaction
	TxEnd( txFunc func() error ) error
}

